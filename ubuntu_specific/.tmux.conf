set -g default-shell /bin/zsh

# |-----------------------------------------------------------------------------------------|
# | FORMATTING INFO                                                                         |
# |-----------------------------------------------------------------------------------------|
# | Begin of section (preceded with upcased title): ************************************    |
# |                                                                                         |
# | End of section: <!!!!!!!!**************!!!!!!!!>                                        |
# |                                                                                         |
# | Section description: < sample description >                                             |
# |                                                                                         |
# | There should be empty line before and after section                                     |
# |                                                                                         |
# | Normal comment always concerns only one line below it (unless specified otherwise).     |
# |-----------------------------------------------------------------------------------------|

# PLUGINS ************************************
# < Tmux plugins installed with tmux plugin manager >
# Plugin manager
set -g @plugin 'tmux-plugins/tpm'
# Analogic to vim powerline
set -g @plugin 'erikw/tmux-powerline'
# Highlight search, search using regex (my fork literally just removing case insensitiveness)
set -g @plugin 'dominikduda/tmux-copydog'
# <!!!!!!!!**************!!!!!!!!>

# TPM CONFIG ************************************
# Initialize
run '~/.tmux/plugins/tpm/tpm'
# <!!!!!!!!**************!!!!!!!!>

# TMUX-POWERLINE CONFIG ************************************
set-option -g status on
set-option -g status-interval 1
set-option -g status-justify "left"
set-option -g status-left-length 0
set-option -g status-right-length 100
set-option -g status-right "#(~/.tmux/plugins/tmux-powerline/powerline.sh right)"
# <!!!!!!!!**************!!!!!!!!>

# TMUX-COPYCAT CONFIG ************************************
set -g @copycat_search_e '(Error|FATAL)'
# TODO: create copycat binding to serach for Failure if it will be necessary after paragraph-jump bindings
# bind C-e copy-mode \; send-keys ?Failure Enter
# <!!!!!!!!**************!!!!!!!!>

# NOT SURE OR TOO LAZY TO CHECK ************************************
# Probably moving out of vim pane without prefix if vim is on (6 lines below)
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n M-h if-shell "$is_vim" "send-keys M-h"  "select-pane -L"
bind-key -n M-j if-shell "$is_vim" "send-keys M-j"  "select-pane -D"
bind-key -n M-k if-shell "$is_vim" "send-keys M-k"  "select-pane -U"
bind-key -n M-l if-shell "$is_vim" "send-keys M-l"  "select-pane -R"
# <!!!!!!!!**************!!!!!!!!>

# SETTINGS ************************************
# No delay after pressing esc
set -s escape-time 0
# Use vi mode
set-window-option -g mode-keys vi
# Increase scrollback lines
set -g history-limit 20000
# Enlarge right-status maximum length
set-option -g status-right-length 2000
# Enable mouse
set -g mouse on
# Reload tmux config on r
bind-key r source-file ~/.tmux.conf; display "TMUX ENV RELOADED"
# Set prefix to alt+space
set-option -g prefix M-space
# Current window higlight color on bottom bar
set-window-option -g window-status-current-bg yellow
# Improve colors
set -g default-terminal 'screen-256color'
# Soften status bar color from harsh green to light gray
set -g status-bg '#666666'
# Start window numbers at 1 to match keyboard order with tmux window order (2 lines below)
set -g base-index 1
set-window-option -g pane-base-index 1
# Renumber windows sequentially after closing any of them
set -g renumber-windows on
# Increase scrollback lines
set -g history-limit 20000
# Signal focus events (used in vim to eg. dim unfocused windows)
set -g focus-events on
# Change active window bg color
set -g window-active-style 'bg=colour233'
# Pane border colors (4 lines below)
set -g pane-border-fg colour243
set -g pane-border-bg colour243
set -g pane-active-border-fg colour114
set -g pane-active-border-bg colour114
# Window title in window bar (2 lines below)
set -g set-titles on
set -g set-titles-string '#T'
# Fix random characters appearing on creen when yanking (2 lines below (or one of them))
set-option -s set-clipboard off
set -g set-clipboard off
# Exit copy mode when scrolled to bottom
set -g @scroll-down-exit-copy-mode "on"
# <!!!!!!!!**************!!!!!!!!>

# KEYBOARD BINDINGS ************************************
# Move between panes using 'vim arrows', alt+l/h (2 lines below)
bind-key -r M-h select-window -t :-
bind-key -r M-l select-window -t :+
# Move between panes using 'vim arrows' (4 lines below)
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
# Maximize pane on space
bind Space resize-pane -Z
# Enter copy mode
bind 'v' copy-mode
# Paste on p
bind-key -T prefix 'p' paste-buffer
# Start selection
bind-key -T copy-mode-vi 'v' send -X begin-selection
# Copy selection to clipboard, clear seletion, display message
bind-key -T copy-mode-vi 'y' send -X copy-pipe "xclip -in -selection clipboard" \; send -X clear-selection \; display 'Copied to clipboard'
# Copy selection to clipboard and exit copy mode
bind-key -T copy-mode-vi 'Y' send -X copy-pipe-and-cancel "xclip -in -selection clipboard" \; display 'Copied to clipboard'
# Copy selection to clipboard, exit copy mode and execute selection in shell
bind-key -T copy-mode-vi 'r' send -X copy-pipe-and-cancel "xclip -in -selection clipboard" \; paste-buffer \; send-keys Enter
# Steal (quickly copy and exit copy mode) current line
bind-key -T copy-mode-vi 's' send -X start-of-line \; send -X begin-selection \; send -X end-of-line \; send -X copy-pipe-and-cancel "xclip -in -selection clipboard" \; display 'Whole line stolen'
# Steal (quickly copy and exit copy mode) till end of current line
bind-key -T copy-mode-vi 'S' send -X begin-selection \; send -X end-of-line \; send -X copy-pipe-and-cancel "xclip -in -selection clipboard" \; display 'Part of line stolen'
# Clear selection
bind-key -T copy-mode-vi Escape send -X clear-selection
# Paragraph movements (2 lines below)
bind-key -T copy-mode-vi 'K' send -X previous-paragraph
bind-key -T copy-mode-vi 'J' send -X next-paragraph
# Jump to begin/end of line (2 lines below)
bind-key -T copy-mode-vi 'H' send -X back-to-indentation
bind-key -T copy-mode-vi 'L' send -X end-of-line
# Search backwards incrementally after pressing prefix (2 lines below)
bind '/' copy-mode \; command-prompt -i -p "search down" "send -X search-backward-incremental \"%%%\""
bind '?' copy-mode \; command-prompt -i -p "search down" "send -X search-forward-incremental \"%%%\""
# Jump to next/previous search result in copycat mode and default search mode
bind-key -T copy-mode-vi 'N' run-shell "/home/dominikduda/.tmux/plugins/tmux-copycat/scripts/copycat_jump.sh 'prev'" \; send -X search-reverse
bind-key -T copy-mode-vi 'n' run-shell "/home/dominikduda/.tmux/plugins/tmux-copycat/scripts/copycat_jump.sh 'next'" \; send -X search-again
# Scroll up/down (2 lines below)
bind-key -T copy-mode-vi 'u' copy-mode \; send -X scroll-up
bind-key -T copy-mode-vi 'd' copy-mode \; send -X scroll-down
# Enter copy mode and scroll up
bind-key -T prefix 'u' copy-mode \; send -X scroll-up
# Page up/down and center cursor vertically
bind-key -T copy-mode-vi 'C-b' send-keys -X page-up \; send-keys -X middle-line
bind-key -T copy-mode-vi 'C-f' send-keys -X page-down \; send-keys -X middle-line
# Ener copy mode, page up and center curosr vertically
bind-key -T prefix 'C-b' copy-mode \; send-keys -X page-up \; send-keys -X middle-line
# Move to beginning of line
bind-key -T copy-mode-vi '0' send-keys -X start-of-line
# <!!!!!!!!**************!!!!!!!!>

# MOUSE BINDINGS ************************************
# Start creating selection during left mouse button drag
bind-key -T root MouseDrag1Pane if-shell -F -t = '#{mouse_any_flag}' "if -Ft= '#{pane_in_mode}' 'copy-mode -M' 'send-keys -M' " "copy-mode -M"
# Copy selection on left mouse button release and display message
bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe "xclip -in -selection clipboard" \; display 'Copied to clipboard'
# Select word under cursor on double left mouse click and copy it
bind-key -T root DoubleClick1Pane select-pane \; copy-mode \; send-keys -X select-word \; send -X copy-pipe "xclip -in -selection clipboard"
# Select line under cursor on tripe left mouse click and copy it
bind-key -T root TripleClick1Pane select-pane \; copy-mode \; send-keys -X select-line \; send -X copy-pipe "xclip -in -selection clipboard"
# <!!!!!!!!**************!!!!!!!!>
